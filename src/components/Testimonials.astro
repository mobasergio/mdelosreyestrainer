---
import { Star, ChevronLeft, ChevronRight } from 'lucide-astro';
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';

const testimonios = await getCollection('testimonios');
---

<section id="testimonials" class="py-24 bg-background">
  <div class="container mx-auto px-4">
    <div class="max-w-3xl mx-auto text-center mb-16 fade-in-section">
      <h2 class="text-4xl md:text-5xl font-bold mb-6 text-balance">Historias que inspiran</h2>
      <p class="text-lg text-muted-foreground leading-relaxed text-pretty">
        No hace falta que te lo diga yo: descubre lo que mis clientes cuentan sobre su experiencia y los cambios que han conseguido.
      </p>
    </div>

    <div class="relative max-w-7xl mx-auto">
      <button id="scroll-left" class="cursor-pointer absolute left-2 sm:left-4 top-1/2 -translate-y-1/2 z-10 inline-flex items-center justify-center rounded-lg border border-input bg-background/95 backdrop-blur-sm shadow-lg hover:bg-accent hover:text-accent-foreground transition-colors w-10 h-10" aria-label="Scroll left">
        <ChevronLeft class="h-6 w-6" />
      </button>

      <div id="testimonials-scroll" class="flex gap-4 md:gap-6 overflow-x-auto pb-4 scrollbar-hide px-12 sm:px-14 md:px-16 snap-x snap-mandatory">
        {testimonios.map(testimonial => (
          <div class="testimonial-card shrink-0 w-[calc(100vw-6rem)] sm:w-[calc(100vw-8rem)] md:w-[450px] lg:w-[380px] snap-center">
            <div class="rounded-lg border-2 bg-card text-card-foreground h-full hover:shadow-xl hover:scale-105 transition-all duration-300 p-6">
              <div class="flex items-center gap-4 mb-4">
                <div class="relative w-16 h-16 rounded-full overflow-hidden">
                  <Image
                    src={testimonial.data.foto || "/placeholder.svg"}
                    alt={testimonial.data.nombre}
                    width={64}
                    height={64}
                    class="w-full h-full object-cover"
                  />
                </div>
                <div class="flex-1">
                  <p class="font-bold">{testimonial.data.nombre}</p>
                </div>
              </div>
              <div class="flex gap-1 mb-4">
                {Array.from({ length: 5 }).map(() => (
                  <Star class="w-5 h-5 fill-accent text-accent" />
                ))}
              </div>
              <div class="space-y-2">
                <p class="testimonial-text text-foreground leading-relaxed">
                  "{testimonial.body}"
                </p>
                <button class="read-more-btn text-sm text-accent hover:text-accent/80 font-medium transition-colors underline-offset-4 hover:underline hidden">
                  Leer más
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      <button id="scroll-right" class="cursor-pointer absolute right-2 sm:right-4 top-1/2 -translate-y-1/2 z-10 inline-flex items-center justify-center rounded-lg border border-input bg-background/95 backdrop-blur-sm shadow-lg hover:bg-accent hover:text-accent-foreground transition-colors w-10 h-10" aria-label="Scroll right">
        <ChevronRight class="h-6 w-6" />
      </button>
    </div>
  </div>
</section>

<style>
  .fade-in-section {
    opacity: 0;
    transform: translateY(30px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }

  .fade-in-section.visible {
    opacity: 1;
    transform: translateY(0);
  }

  .testimonial-text {
    display: -webkit-box;
    -webkit-line-clamp: 6;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .testimonial-text.expanded {
    display: block;
    -webkit-line-clamp: unset;
  }

  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }

  #testimonials-scroll {
    scroll-behavior: smooth;
  }

  .testimonial-card {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  
  .testimonial-card:hover {
    transform: scale(1.02);
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }
</style>

<script>
  const observer = new IntersectionObserver(
    entries => entries.forEach(e => e.isIntersecting && e.target.classList.add('visible')),
    { threshold: 0.1, rootMargin: '-80px' }
  );
  document.querySelectorAll('.fade-in-section').forEach(el => observer.observe(el));

  const scrollContainer = document.getElementById('testimonials-scroll');
  const scrollLeftBtn = document.getElementById('scroll-left');
  const scrollRightBtn = document.getElementById('scroll-right');

  if (scrollContainer && scrollLeftBtn && scrollRightBtn) {
    const cards = [...scrollContainer.querySelectorAll('.testimonial-card')];
    
    if (cards.length > 0) {
      const firstClone = cards[0].cloneNode(true);
      const lastClone = cards[cards.length - 1].cloneNode(true);
      scrollContainer.append(firstClone);
      scrollContainer.prepend(lastClone);
    }

    const getCardWidth = () => {
      const card = scrollContainer.querySelector('.testimonial-card');
      const gap = parseInt(getComputedStyle(scrollContainer).gap) || 24;
      return card ? card.offsetWidth + gap : 0;
    };

    let cardWidth = getCardWidth();
    scrollContainer.scrollLeft = cardWidth;

    window.addEventListener('resize', () => {
      cardWidth = getCardWidth();
    }, { passive: true });

    const scrollByCard = dir => scrollContainer.scrollBy({ left: dir * cardWidth, behavior: 'smooth' });

    const handleLoop = () => {
      const maxScroll = scrollContainer.scrollWidth - scrollContainer.clientWidth;
      if (scrollContainer.scrollLeft >= maxScroll - 10) {
        scrollContainer.scrollTo({ left: cardWidth, behavior: 'auto' });
      } else if (scrollContainer.scrollLeft <= 10) {
        scrollContainer.scrollTo({ left: maxScroll - cardWidth, behavior: 'auto' });
      }
    };

    scrollLeftBtn.addEventListener('click', () => scrollByCard(-1), { passive: true });
    scrollRightBtn.addEventListener('click', () => scrollByCard(1), { passive: true });
    scrollContainer.addEventListener('scroll', handleLoop, { passive: true });
  }

  document.querySelectorAll('.testimonial-card').forEach(card => {
    const text = card.querySelector('.testimonial-text');
    const btn = card.querySelector('.read-more-btn');
    
    if (text && btn && text.textContent.trim().length > 150) {
      btn.classList.remove('hidden');
      btn.addEventListener('click', () => {
        const expanded = text.classList.toggle('expanded');
        btn.textContent = expanded ? 'Leer menos' : 'Leer más';
      }, { passive: true });
    }
  });
</script>